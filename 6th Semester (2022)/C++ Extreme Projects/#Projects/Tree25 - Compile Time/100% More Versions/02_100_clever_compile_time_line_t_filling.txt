#include <fmt/ranges.h>
#include <array>
using namespace std;


template <int64_t m_size>
constexpr static auto MyTree = []() consteval
{
	// Initialization
	// --------------

	using Type = decltype(m_size);
	using Line_t = tuple<array<char, m_size>, string_view, array<char, m_size>>;
	array<Line_t, m_size - (m_size % 2 == 0)> A{};
	auto A_it = A.begin();
	bool is_sep = false;
	bool m_mid = false;

	auto Liner = [&](const Type& n)
	{
		auto conditional_star = [&](const Type& x) { return is_sep && x % 2 == 0 ? ' ' : '*'; };

		return Line_t		// Clever Generation
		{
			[&] {
				decltype(get<0>(Line_t{})) A1{}; auto m_it = begin(A1);

				for (auto i = m_size; i > n; i--)
				{
					*m_it++ = ' ';
				}

				for (auto i = n; i > 0; i--)
				{
					*m_it++ = conditional_star(i);
				}

				return A1;
			}(),
			((is_sep = !is_sep) ? ((m_mid = !m_mid) ? " *** " : "  *  ") : "     "),
			[&] {
				decltype(get<2>(Line_t{})) A2{}; auto m_it = begin(A2);

				for (Type i = 1; i < n + 1; i++)
				{
					*m_it++ = conditional_star(i);
				}
				
				return A2;
			}(),
		};
	};

	// Filling Heights
	// ---------------

	for (auto i = m_size; i > 0; i -= 2)
	{
		*A_it++ = Liner(i);
	}

	for (auto i = m_size % 2 ? 3 : 4; i < m_size + 1; i += 2)
	{
		*A_it++ = Liner(i);
	}

	// Lastly
	// ------

	return A;
}();


int main() noexcept
{
	for (const auto& Line : MyTree<47>)
	{
		fmt::print("{}{}{}\n", get<0>(Line), get<1>(Line), get<2>(Line));
	}
}