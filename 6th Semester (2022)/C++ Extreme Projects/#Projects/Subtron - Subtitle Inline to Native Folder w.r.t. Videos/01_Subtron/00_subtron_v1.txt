#include <range/v3/view/zip.hpp>
#include <filesystem>
#include <format>
#include <ranges>

namespace vs = std::ranges::views;
namespace fs = std::filesystem;
using namespace std::string_view_literals;

int main()
{
	static constexpr auto if_debug = true;
	static const auto m_path = if_debug ? fs::path(R"(D:\WorkShop\Subtron)") : fs::current_path();

	static auto my_sub_files = fs::directory_iterator((fs::directory_iterator(m_path) | vs::filter([](const fs::directory_entry& x) { return x.is_directory(); })).begin()->path());
	static auto my_vid_files = fs::directory_iterator(m_path) | vs::filter([](const fs::directory_entry& x) { return x.is_regular_file(); });

	for (const auto& [vid, sub] : ranges::views::zip(my_vid_files, my_sub_files))
	{
		const auto my_destin_name = std::format(R"({}\{}{})", m_path.string(), vid.path().stem().string(), sub.path().extension().string());
		copy_file(sub.path(), my_destin_name, fs::copy_options::overwrite_existing);
	}
}