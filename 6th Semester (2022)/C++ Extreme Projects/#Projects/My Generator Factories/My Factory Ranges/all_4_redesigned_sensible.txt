#include <fmt/ranges.h>
#include <ranges>
using namespace std;

namespace my_iterator
{
	struct prime_it
	{
		using value_type = size_t;
		using difference_type = ptrdiff_t;

		constexpr decltype(auto) operator* () const { return m_current; }
		constexpr decltype(auto) operator++() { while (is_not_prime()) {} return *this; }
		constexpr decltype(auto) operator++(int) { ++* this; }

	private:
		constexpr bool is_not_prime()
		{
			for (auto i = ++m_current / 2; i > 1; --i)
			{
				if (m_current % i == 0) return true;
			}
			return false;
		}
		value_type m_current = 1;
	};

	struct fibon_it
	{
		using value_type = size_t;
		using difference_type = ptrdiff_t;

		constexpr decltype(auto) operator* () const { return x; }
		constexpr decltype(auto) operator++ () { x = (y = x + y) - x; return *this; }
		constexpr decltype(auto) operator++ (int) { return ++ * this; }

	private:
		value_type x = 0, y = 1;
	};
}

int main()
{
	constexpr size_t m_limit = 15;
	constexpr auto my_fibnos = views::counted(my_iterator::fibon_it(), m_limit);
	constexpr auto my_primes = views::counted(my_iterator::prime_it(), m_limit);

	fmt::print("Fibonacci : {}\n", my_fibnos);
	fmt::print("Primes    : {}\n", my_primes);
}