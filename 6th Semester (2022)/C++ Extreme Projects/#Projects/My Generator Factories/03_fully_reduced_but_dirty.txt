#include <fmt/ranges.h>
#include <ranges>
#include <random>
using namespace std;


namespace my_factory
{
	namespace generator
	{
		struct prime_numbers_g
		{
			constexpr auto& operator()() { while (advance_till_prime()) {} return m_current; }
		private:
			size_t m_current = 0;
			constexpr bool advance_till_prime()
			{
				for (auto i = ++m_current / 2; i > 1; --i)
				{
					if (m_current % i == 0) return true;
				}
				return false;
			}
		};

		struct fibonacci_numbers_g
		{
			constexpr auto& operator()() { return x = (y = x + y) - x; }
		private:
			size_t x = 1, y = 0;
		};

		template <class _Dis = std::uniform_int_distribution<size_t>, class _Eng = std::default_random_engine>
		struct random_numbers_g
		{
			constexpr random_numbers_g(_Dis::result_type v1, _Dis::result_type v2) : my_engine(std::random_device()()), dist(v1, v2) {}
			constexpr auto operator()() { return dist(my_engine); }
		private:
			_Eng my_engine;
			_Dis dist;
		};

		template <class _Gen>
		struct my_iterator_interface
		{
			using value_type = size_t;
			using difference_type = ptrdiff_t;

			constexpr decltype(auto) operator* () const noexcept { return m_current; }
			constexpr decltype(auto) operator++() noexcept { m_current = my_generator(); return *this; }
			constexpr decltype(auto) operator++(int) noexcept { ++* this; }

		//private:
			_Gen my_generator;
			value_type m_current = my_generator();
		};
	}

	namespace iterator
	{
		template <class _Dis = std::uniform_int_distribution<size_t>, class _Eng = std::default_random_engine>
		auto random_numbers_it = [](const _Dis::result_type& v1, const _Dis::result_type& v2)
		{
			using random_iterator = generator::my_iterator_interface<generator::random_numbers_g<_Dis, _Eng>>;
			return generator::my_iterator_interface<generator::random_numbers_g<_Dis, _Eng>>{ { v1, v2 } };
		};

		using prime_numbers_it = generator::my_iterator_interface<generator::prime_numbers_g>;
		using fibonacci_numbers_it = generator::my_iterator_interface<generator::fibonacci_numbers_g>;
	}

	namespace my_view
	{
		constexpr auto primes(const integral auto& limit) { return views::counted(iterator::prime_numbers_it(), limit); }
		constexpr auto fibons(const integral auto& limit) { return views::counted(iterator::fibonacci_numbers_it(), limit); }
	}
}

int main()
{
	constexpr auto limit = 15;
	fmt::print("Primes    : {}\n", my_factory::my_view::primes(limit));
	fmt::print("Fibonacci : {}\n", my_factory::my_view::fibons(limit));
	fmt::print("Randoms   : {}\n", views::counted(my_factory::iterator::random_numbers_it<>(0, 50), limit));
}
