#include <iostream>
#include <ranges>
#include <random>
using namespace std;

namespace my_views
{
	template <integral auto l, integral auto h>
	struct my_random_uniform_iterator
	{
		using value_type = size_t;
		using difference_type = ptrdiff_t;
		using iterator_category = forward_iterator_tag;

		auto operator* () const { return dist(*(decltype(my_engine)*)(&my_engine)); }

		decltype(auto) operator++ () { return *this; }
		decltype(auto) operator++ (int) { return *this; }

		bool operator== (const my_random_uniform_iterator&) const = default;

	private:

		default_random_engine my_engine{ random_device{}() };
		uniform_int_distribution<size_t> dist{ l,h };
	};

	template <integral auto l, integral auto h>
	auto uniform_int_distribution_view = ranges::subrange<my_random_uniform_iterator<l, h>, unreachable_sentinel_t>{};
}

int main()
{
	for (const auto& x : my_views::uniform_int_distribution_view<0, 100> | views::take(10))
	{
		cout << x << ' ';
	}
}