#include <iostream>
#include <ranges>
#include <random>
using namespace std;


struct my_random_standard_iterator
{
	using value_type = size_t;
	using difference_type = ptrdiff_t;
	using iterator_category = forward_iterator_tag;

	auto operator* () const { return dist(*(decltype(my_engine)*)(&my_engine)); }

	decltype(auto) operator++ () { return *this; }
	decltype(auto) operator++ (int) { return *this; }

	bool operator== (const my_random_standard_iterator&) const = default;

private:

	default_random_engine my_engine{ random_device{}() };
	uniform_int_distribution<size_t> dist{ 0,100 };
};

auto random_view_standard = ranges::subrange<my_random_standard_iterator, unreachable_sentinel_t>{};

int main()
{
	for (const auto& x : random_view_standard | views::take(10))
	{
		cout << x << ' ';
	}
}