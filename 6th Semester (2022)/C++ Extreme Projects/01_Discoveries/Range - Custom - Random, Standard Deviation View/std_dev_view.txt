#include <fmt/ranges.h>
#include <ranges>
#include <random>
using namespace std;

template <integral auto x, integral auto y>
struct random_it
{
	using value_type = float_t;
	using difference_type = ptrdiff_t;
	using iterator_category = forward_iterator_tag;

	constexpr decltype(auto) operator* () const { return m_current; }
	constexpr decltype(auto) operator++ () { m_current = dist(my_engine); return *this; }
	constexpr decltype(auto) operator++ (int) { return ++ * this; }

private:
	default_random_engine my_engine{ random_device{}() };
	normal_distribution<value_type> dist{ x,y };
	value_type m_current = dist(my_engine);
};

template <integral auto x, integral auto y>
auto std_deviation_view = ranges::subrange<random_it<x, y>, unreachable_sentinel_t>{};

int main()
{
	fmt::print("{}", std_deviation_view<50, 10> | views::take(10));
}