#include <iostream>
#include <ranges>
using namespace std;

struct fib_iterator
{
	using value_type = size_t;
	using difference_type = ptrdiff_t;
	using iterator_category = forward_iterator_tag;

	const auto& operator* () const { return x; }

	decltype(auto) operator++ ()
	{
		x = exchange(y, x + y);
		return *this;
	}

	decltype(auto) operator++ (int) 
	{ 
		auto temp = *this;
		++* this;
		return temp;
	}

	bool operator== (const fib_iterator&) const = default;

private:

	value_type x = 0, y = 1;
};

constexpr auto fibonacci_inf = ranges::subrange<fib_iterator, unreachable_sentinel_t>{};

int main()
{
	for (auto x : fibonacci_inf | views::take(10))
	{
		cout << x << ' ';
	}
}