#include <fmt/ranges.h>
#include <range/v3/view.hpp>
#include <random>

auto random_number_g()
{
	static auto my_engine = std::mt19937_64{ std::random_device{}() };
	return std::uniform_int_distribution<size_t>{ 10, 99 }(my_engine);
}

int main()
{
	for (constexpr size_t limit = 15; [[maybe_unused]] auto _ : ranges::views::indices(limit))
	{
		const auto m_random = ranges::views::generate_n(random_number_g, limit) | ranges::to<std::vector>;
		static auto indices = ranges::views::indices(limit) | ranges::to<std::vector>;
		static auto project = [&] (const auto i) { return m_random[i]; };

		std::ranges::sort(indices, {}, project);
		fmt::print("{}\n", indices | ranges::views::transform(project));
	}
}