#include <fmt/ranges.h>
#include <ranges>
namespace rg = std::ranges;
namespace vs = rg::views;

struct only_prime : rg::range_adaptor_closure<only_prime>
{
	struct is_prime
	{
		static constexpr auto square_root(const std::integral auto n) noexcept
		{
			if (n < 2) return n;

			std::remove_cvref_t<decltype(n)> left = 1, right = n;
			while (left <= right)
			{
				const auto mid = left + (right - left) / 2;
				if (mid == n / mid) return mid;
				if (mid < n / mid) left = mid + 1;
				else right = mid - 1;
			}
			return right;
		}

		constexpr auto operator()(const std::integral auto number) const noexcept
		{
			for (auto x = square_root(number); x > 1; --x)
				if (number % x == 0) return false;
			return true;
		}
	};

	template <rg::input_range R> requires std::integral<rg::range_value_t<R>>
	constexpr auto operator()(R&& r) const noexcept
	{
		return r | vs::filter(is_prime{});
	}
};

int main()
{
	auto my_range = vs::iota(0) | only_prime() | vs::take(25);
	fmt::print("{}\n", my_range);
}