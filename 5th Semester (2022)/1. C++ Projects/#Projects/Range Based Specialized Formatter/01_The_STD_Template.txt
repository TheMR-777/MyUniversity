#include <iostream>
#include <vector>
#include <format>
using namespace std;


template <class T>
struct formatter<vector<T>>: formatter<T>
{
	template <class C> requires requires { C::push_back(); }
	void format(C& the_Buffer, const vector<T>& V, format_context& the_Context)
	{
		the_Buffer.push_back('[');

		if (auto it = V.begin(), end = V.end(); it != end)
		{
			formatter<T>::format(the_Buffer, *it, the_Context); ++it;

			while (it != end)
			{
				the_Buffer.push_back(' ');
				formatter<T>::format(the_Buffer, *it, the_Context); ++it;
			}
		}

		the_Buffer.push_back(']');
	}
};

int main()
{
	vector<int> V = { 0,1,2,3,4,5,6,7,8,9 };

	auto formatted_values = format("{}", V);
}