#include <iostream>
#include <variant>
#include <vector>
using namespace std;


template <class Target, class... _Types>
concept any_of = disjunction<is_same<Target, _Types>...>::value;

int main()
{
	// Initialization
	// --------------

	using my_var = variant<string_view, uint64_t, double>;
	vector<my_var> W = { "TheMR", 99u, 7.77 };

	auto Print = [](const my_var& x)
	{
		auto Printer = [&x]<any_of<string_view, uint64_t, double> T>(const T& elem)
		{
			cout << (same_as<T, double> ? "Double: " : same_as<T, uint64_t> ? "uint_t: " : "String: ") << elem << '\n';
		};

		visit(Printer, x);
	};

	// Printing
	// --------

	for (const auto& var : W)
	{
		Print(var);
	}
}