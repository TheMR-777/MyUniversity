#include <iostream>
#include <vector>
#include <functional>
using namespace std;



using Type = int;

class Bin_Search
{
    struct Node
    {
        Type m_Data;
        Node* m_Left;
        Node* m_Right;

        Node(const Type& data) : m_Data(data), m_Left(nullptr), m_Right(nullptr) {}
    };

    struct Iterator
    {
        Node* m_Parent;
        Node* m_Current;

        Iterator() : m_Current(nullptr), m_Parent(nullptr) {}
        Iterator(Node* const& node) : m_Parent(node), m_Current(node) {}

        void go_back()
        {
            m_Current = m_Parent;
        }

        void proper_go_left()
        {
            m_Current = (m_Parent = m_Current)->m_Left;
        }

        void proper_go_right()
        {
            m_Current = (m_Parent = m_Current)->m_Right;
        }

        void just_go_left()
        {
            m_Current = m_Current->m_Left;
        }

        void just_go_right()
        {
            m_Current = m_Current->m_Right;
        }

        void finish()
        {
            m_Current = m_Parent = nullptr;
        }


        /*void operator=(Node* const& right)
        {
            m_Parent = (m_Current == nullptr) ? right : m_Current;
            m_Current = right;

            //Iterator&
            //return *this;
        }*/
    };


    Node* m_Root;			// Root of the Tree
    Iterator m_It;			// m_It of Tree
    size_t m_Size;			// Size of the Tree


    void L_PreOrder(const function<void(Node* const&)>& Func)
    {
        begin();
        auto Lambda = [&](auto& Lambda, Node*& it) -> void
        {
            if (it == nullptr)
            {
                return;
            }
            else
            {
                Func(it);
                Lambda(Lambda, it->m_Left);
                Lambda(Lambda, it->m_Right);
            }
        };
        Lambda(Lambda, m_It.m_Current);
    }

    void L_InOrder(const function<void(Node* const&)>& Func)
    {
        begin();
        auto Lambda = [&](auto& Lambda, Node*& it) -> void
        {
            if (it == nullptr)
            {
                return;
            }
            else
            {
                Lambda(Lambda, it->m_Left);
                Func(it);
                Lambda(Lambda, it->m_Right);
            }
        };
        Lambda(Lambda, m_It.m_Current);
    }

    void L_PostOrder(const function<void(Node* const&)>& Func)
    {
        begin();
        auto Lambda = [&](auto& Lambda, Node*& it) -> void
        {
            if (it == nullptr)
            {
                return;
            }
            else
            {
                Lambda(Lambda, it->m_Left);
                Lambda(Lambda, it->m_Right);
                Func(it);
            }
        };
        Lambda(Lambda, m_It.m_Current);
    }

    void begin()
    {
        m_It.m_Current = m_Root;
    }

    void proper_begin()
    {
        m_It.m_Current = m_It.m_Parent = m_Root;
    }

    Iterator InOrder_Successor(Iterator& node)
    {
        // Iterator Booting
        // -----------------

        Iterator It = node;
        It.proper_go_right();

        // Termination Point
        // -----------------

        while (It.m_Current->m_Left != nullptr)
        {
            It.proper_go_left();
        }

        return It;
    }


public:

    Bin_Search() : m_It(nullptr), m_Root(nullptr), m_Size(NULL) {}

    Bin_Search(initializer_list<Type> L) : m_Root(new Node(*L.begin())), m_It(m_Root), m_Size(L.size())
    {
        // Children Check
        // --------------

        if (L.size() != 1)
        {
            // Iterating the Whole List
            // --------------

            for (const Type* Data = L.begin() + 1; Data != L.end(); ++Data)
            {
                while (true)
                {
                    // Duplication Check
                    // --------------

                    if (m_It.m_Current->m_Data == *Data)
                    {
                        --m_Size; begin(); break;
                    }

                    // Left Jobs
                    // ---------

                    else if (*Data < m_It.m_Current->m_Data)
                    {
                        // Insertion
                        // ---------

                        if (m_It.m_Current->m_Left == nullptr)
                        {
                            m_It.m_Current->m_Left = new Node(*Data); begin(); break;
                        }

                        // Iteration
                        // ---------

                        else
                        {
                            m_It.just_go_left();
                        }
                    }

                    // Right Jobs
                    // ---------

                    else if (*Data > m_It.m_Current->m_Data)
                    {
                        // Insertion
                        // ---------

                        if (m_It.m_Current->m_Right == nullptr)
                        {
                            m_It.m_Current->m_Right = new Node(*Data); begin(); break;
                        }

                        // Iteration
                        // ---------

                        else
                        {
                            m_It.just_go_right();
                        }
                    }

                    // Unhandled Situation
                    // --------------

                    else
                    {
                        cout << "Unhandeled Situation Caught!" << endl;
                        begin(); break;
                    }
                }
            }
        }
    }


    void Insert(const Type& data)
    {
        // No Root Case
        // ------------

        if (m_Root == nullptr)
        {
            m_It.m_Current = m_It.m_Parent = m_Root = new Node(data); ++m_Size;
        }

        // Going towards Children
        // Iteration Step
        // ----------

        else
        {
            begin();

            while (true)
            {
                // Duplication Check
                // ----------

                if (m_It.m_Current->m_Data == data)
                {
                    cout << " |" << endl;
                    cout << " |  ------------------" << endl;
                    cout << " +--[ Got  Duplicate ] : [ " << data << " ]" << endl;
                    cout << " |  ------------------" << endl;
                    break;
                }

                // Left Jobs (Insertion/Iteration)
                // ----------

                else if (data < m_It.m_Current->m_Data)
                {
                    // Insertion
                    // ---------

                    if (m_It.m_Current->m_Left == nullptr)
                    {
                        m_It.m_Current->m_Left = new Node(data); ++m_Size;
                        break;
                    }

                    // Iteration
                    // ---------

                    else
                    {
                        m_It.just_go_left();
                    }
                }

                // Right Jobs (Insertion/Iteration)
                // ----------

                else if (data > m_It.m_Current->m_Data)
                {
                    // Insertion
                    // ---------

                    if (m_It.m_Current->m_Right == nullptr)
                    {
                        m_It.m_Current->m_Right = new Node(data); ++m_Size;
                        break;
                    }

                    // Iteration
                    // ---------

                    else
                    {
                        m_It.just_go_right();
                    }
                }

                // Unhandled Situation
                // ----------

                else
                {
                    cout << "Unhandled Exception Caught!" << endl;
                    break;
                }
            }
        }
    }

    bool Search(const Type& data)
    {
        // Iterator Bootup
        // ---------------

        proper_begin();

        // Data Traversal
        // ---------------

        while (true)
        {
            // Match Case
            // ----------

            if (m_It.m_Current->m_Data == data)
            {
                return true;
            }

            // Left Jobs
            // ---------

            else if (data < m_It.m_Current->m_Data)
            {
                // N/A Case
                // --------

                if (m_It.m_Current->m_Left == nullptr)
                {
                    return false;
                }

                // Iteration
                // --------

                else
                {
                    m_It.proper_go_left();
                }
            }

            // Right Jobs
            // ---------

            else if (data > m_It.m_Current->m_Data)
            {
                // N/A Case
                // --------

                if (m_It.m_Current->m_Right == nullptr)
                {
                    return false;
                }

                // Iteration
                // --------

                else
                {
                    m_It.proper_go_right();
                }
            }

            // Unhandled Case
            // ---------

            else
            {
                cout << "Unhandled Exception Caught!" << endl; break;
            }
        }
    }

    void Delete(const Type& data)
    {
        // If Node is Present
        // ----------

        if (Search(data))
        {
            --m_Size;

        Delete_IT:

            // Case #1 - Leaf
            // -------

            if (m_It.m_Current->m_Left == nullptr && m_It.m_Current->m_Right == nullptr)
            {
                (m_It.m_Current->m_Data < m_It.m_Parent->m_Data ? m_It.m_Parent->m_Left : m_It.m_Parent->m_Right) = nullptr;
            }

            // Case #2 - One Child/Sub-Tree
            // -------

            else if (m_It.m_Current->m_Left == nullptr)
            {
                (m_It.m_Current->m_Data < m_It.m_Parent->m_Data ? m_It.m_Parent->m_Left : m_It.m_Parent->m_Right) = m_It.m_Current->m_Right;
            }

            else if (m_It.m_Current->m_Right == nullptr)
            {
                (m_It.m_Current->m_Data < m_It.m_Parent->m_Data ? m_It.m_Parent->m_Left : m_It.m_Parent->m_Right) = m_It.m_Current->m_Left;
            }

            // Case #3 - Two Children/Sub-Trees
            // -------

            else
            {
                // Successor Finding
                // ---------

                Iterator n_Successor = InOrder_Successor(m_It);

                // Replacement
                // ---------

                m_It.m_Current->m_Data = n_Successor.m_Current->m_Data;

                // To Delete the Target
                // ---------

                m_It = n_Successor;
                goto Delete_IT;
            }
        }

        /*
        if (Search(data))
        {
            --m_Size;

            // If Target has no Right-Sub-Tree
            // means it can be Ripple Deleted
            // ----------

            if (m_It.m_Current->m_Right == nullptr)
            {
                if (m_It.m_Current->m_Data > m_It.m_Parent->m_Data)
                {
                    m_It.m_Parent->m_Right = m_It.m_Current->m_Left;
                }
                else
                {
                    m_It.m_Parent->m_Left = m_It.m_Current->m_Left;
                }

                delete m_It.m_Current;
            }

            // Passing Right to find Successor
            // ----------

            else if (m_It.m_Current->m_Left != nullptr)
            {
                Node*& successor = get_minimum(m_It.m_Current->m_Right);
            }
            else
            {
                cout << "Leaf" << endl;
            }
        }
        */
    }


    void Traversal_PreOrder()
    {
        cout << "Data : [ ";
        L_PreOrder([](Node* const& data) {cout << data->m_Data << " "; });
        cout << "]" << endl;
    }

    void Traversal_InOrder()
    {
        cout << "Data : [ ";
        L_InOrder([](Node* const& data) {cout << data->m_Data << " "; });
        cout << "]" << endl;
    }

    void Traversal_PostOrder()
    {
        cout << "Data : [ ";
        L_PostOrder([](Node* const& data) {cout << data->m_Data << " "; });
        cout << "]" << endl;
    }

    void Print_Linear()
    {
        Traversal_InOrder();

        cout << "Size : ( " << size() << " )" << endl;
    }

    vector<Type> Path_PreOrder()
    {
        vector<Type> V;
        L_PreOrder([&V](Node* const& data) {V.push_back(data->m_Data); });
        return V;
    }

    vector<Type> Path_InOrder()
    {
        vector<Type> V;
        L_InOrder([&V](Node* const& data) {V.push_back(data->m_Data); });
        return V;
    }

    vector<Type> Path_PostOrder()
    {
        vector<Type> V;
        L_PostOrder([&V](Node* const& data) {V.push_back(data->m_Data); });
        return V;
    }

    vector<Type> Path_Till(const Type& data)
    {
        // Iterator Bootup
        // and vector init
        // ---------------

        begin();
        vector<Type> V;

        // Data Traversal
        // ---------------

        while (true)
        {
            // Match Case
            // ----------

            if (m_It.m_Current->m_Data == data)
            {
                V.push_back(data);
                return V;
            }

            // Left Jobs
            // ---------

            else if (data < m_It.m_Current->m_Data)
            {
                // N/A Case
                // --------

                if (m_It.m_Current->m_Left == nullptr)
                {
                    // V.clear();
                    return V;
                }

                // Iteration
                // --------

                else
                {
                    V.push_back(m_It.m_Current->m_Data);
                    m_It.just_go_left();
                }
            }

            // Right Jobs
            // ---------

            else if (data > m_It.m_Current->m_Data)
            {
                // N/A Case
                // --------

                if (m_It.m_Current->m_Right == nullptr)
                {
                    // V.clear();
                    return V;
                }

                // Iteration
                // --------

                else
                {
                    V.push_back(m_It.m_Current->m_Data);
                    m_It.just_go_right();
                }
            }

            // Unhandled Case
            // ---------

            else
            {
                cout << "Unhandled Exception Caught!" << endl; break;
            }
        }
    }

    const size_t& size()
    {
        return m_Size;
    }

    const Node* const& Root()
    {
        return m_Root;
    }

    ~Bin_Search()
    {
        L_PostOrder([](Node* const& data) {delete data; });
    }
};


namespace Verify
{
    void Path_PreOrder(Bin_Search& T)
    {
        // Manually Printing
        // -----------------

        cout << "Pre-Order  : [ ";

        for (auto Data : T.Path_PreOrder())
        {
            cout << Data << " ";
        }

        cout << "]" << endl;
    }

    void Path_InOrder(Bin_Search& T)
    {
        // Manually Printing
        // -----------------

        cout << "In Order   : [ ";

        for (auto Data : T.Path_InOrder())
        {
            cout << Data << " ";
        }

        cout << "]" << endl;
    }

    void Path_PostOrder(Bin_Search& T)
    {
        // Manually Printing
        // -----------------

        cout << "Post Order : [ ";

        for (auto Data : T.Path_PostOrder())
        {
            cout << Data << " ";
        }

        cout << "]" << endl;
    }
}

int main()
{
    // Initialzation
    // -------------

    Bin_Search T;
    int input_data;

    // Input + Path
    // -------------

    cout << " +---------------------------------------------------+" << endl;
    cout << " | Give the Input as asked                           |" << endl;
    cout << " | Enter 999 to Terminate the Input Session          |" << endl;
    cout << " +---------------------------------------------------+" << endl;

    do
    {
        cout << " |" << endl;
        cout << " +--[ Insert Element ]-> ";
        cin >> input_data;

        if (input_data != 999)
        {
            T.Insert(input_data);
        }
    } 
    while (input_data != 999);

    // Printing the Results
    // -------------

    cout << endl << endl;
    cout << "Results" << endl;
    cout << "------------" << endl;
    Verify::Path_PreOrder(T);
    Verify::Path_InOrder(T);
    Verify::Path_PostOrder(T);
    cout << endl;

    T.Print_Linear();
    cout << endl;
}