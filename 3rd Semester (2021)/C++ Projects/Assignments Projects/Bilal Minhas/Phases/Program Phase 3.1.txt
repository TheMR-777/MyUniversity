#include <iostream>
using namespace std;


class Tree25
{
	int RANGE;
	bool Button, Mid;

	void Toggle(bool& Switch)
	{
		Switch = !Switch;
	}

	void Single_Line(const int& current_range, bool Mid_Rev = 1)
	{
		// Spacer
		// ------

			for (int x = RANGE - current_range; x > 0; --x)
			{
				cout << " ";
			}

		// Forward Sequence
		// -------

			for (int x = current_range; x > 0; --x)
			{
				cout << (Button ? "*" : (x % 2 ? "*" : " "));
			}
			cout << " ";

		// Mid Pattern
		// -------

			if (Mid_Rev)
			{
				cout << (Button ? "   " : (Mid ? " * " : "***"));
			}
			else
			{
				cout << (!Button ? "   " : (Mid ? " * " : "***"));
			}
			if ((Mid_Rev && !Button) || (!Mid_Rev && Button)) Toggle(Mid);
			cout << " ";

		// Reverse Sequence
		// -------

			for (int x = current_range; x > 0; --x)
			{
				cout << (!Button ? "*" : (x % 2 == 0 ? " " : "*"));
			}

		// Switching Button
		// -------

		cout << endl;
		Toggle(Button);
	}

public:

	Tree25(const int& R) : RANGE(R), Button(true), Mid(true) {}

	void Generate()
	{
		for (int x = RANGE; x > 0; x = x - 2)
		{
			Single_Line(x);
		}

		Toggle(Button);

		for (int x = 3; x <= RANGE; x = x + 2)
		{
			Single_Line(x, 0);
		}
	}
};


int main()
{
	Tree25(21).Generate();
}