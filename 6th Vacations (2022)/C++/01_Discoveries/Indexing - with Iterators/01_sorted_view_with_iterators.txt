#include <fmt/ranges.h>
#include <range/v3/view.hpp>
#include <random>
namespace rg = ranges;
namespace vs = rg::views;

auto random_number_g()
{
	static auto my_engine = std::mt19937_64{ std::random_device{}() };
	return std::uniform_int_distribution<size_t>{ 10, 99 }(my_engine);
}

int main()
{
	for (constexpr auto my_limit = 20; const auto _ : vs::indices(my_limit))
	{
		const auto my_random_numbers = vs::generate_n(random_number_g, my_limit) | rg::to<std::vector>;
		auto iterator_vector_randoms = vs::iota(std::begin(my_random_numbers), std::end(my_random_numbers)) | rg::to<std::vector>;
		static const auto projection = &rg::iterator_t<decltype(my_random_numbers)>::operator*;

		std::ranges::sort(iterator_vector_randoms, {}, projection);
		fmt::print("{}\n", iterator_vector_randoms | vs::transform(projection));
	}
}