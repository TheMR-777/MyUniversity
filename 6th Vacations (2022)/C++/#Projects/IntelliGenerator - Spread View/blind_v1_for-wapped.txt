#include <fmt/ranges.h>
#include <random>

auto random_number_g()
{
	static auto my_engine = std::mt19937_64{ std::random_device{}() };
	return std::uniform_int_distribution<size_t>{ 10, 99 }(my_engine);
}

void print_sq(auto clone)
{
	for (auto my_rounded = std::llroundf(std::sqrt(clone)); true; fmt::print("\n"))
	{
		for (auto r = my_rounded; r > 0; --r, --clone)		// Row Filling
		{
			if (!(clone > 0)) return;						// Exit Point, if bucket of numbers finishes
			fmt::print("{} ", random_number_g());			// Do anything here
		}
	}
}

int main()
{
	constexpr auto my_number = 6;
	print_sq(my_number);
}