#include <fmt/ranges.h>
#include <ranges>
#include <array>
namespace rg = std::ranges;
namespace vs = rg::views;

template <size_t N>
constexpr auto primes_array()
{
	using value_type = decltype(N);

	auto is_prime = [](const value_type x) noexcept
	{
		for (auto i = x / 2; i > 1; --i)
			if (x % i == 0) return false;
		return true;
	};

	auto my_array = std::array<value_type, N>{};
	auto my_prime = vs::iota(value_type{})
		| vs::filter(is_prime)
		| vs::take(N);
	rg::copy(my_prime, my_array.begin());
	
	return my_array;
}

int main()
{
	constexpr auto my_primes = primes_array<15>();
	fmt::print("{}", my_primes);
}