#include <algorithm>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>

// Reads the words from the dictionary file and returns them in a vector
std::vector<std::string> load_dictionary_from_file(const std::string& filename) {
    std::vector<std::string> dictionary;

    // Open the dictionary file
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Error: failed to open dictionary file: " << filename << std::endl;
        return dictionary;
    }

    // Read the words from the file and add them to the dictionary
    std::string word;
    while (file >> word) {
        dictionary.push_back(word);
    }

    return dictionary;
}

// Checks if the given word is spelled correctly by searching it in the dictionary using
// the binary search algorithm
bool is_word_spelled_correctly(const std::string& word, const std::vector<std::string>& dictionary, bool case_insensitive) {
    // Convert the word to lowercase if case is ignored
    std::string normalized_word = word;
    if (case_insensitive) {
        std::transform(normalized_word.begin(), normalized_word.end(), normalized_word.begin(), ::tolower);
    }

    // Use the binary search algorithm to find the word in the dictionary
    int left_index = 0;
    int right_index = dictionary.size() - 1;
    while (left_index <= right_index) {
        int middle_index = left_index + (right_index - left_index) / 2;
        if (dictionary[middle_index] < normalized_word) {
            left_index = middle_index + 1;
        }
        else if (dictionary[middle_index] > normalized_word) {
            right_index = middle_index - 1;
        }
        else {
            // The word was found in the dictionary
            return true;
        }
    }

    // The word was not found in the dictionary
    return false;
}

// Main function
int main(int argc, char** argv) {
    // Parse the command line arguments
    std::string input_filename;
    std::string output_filename;
    bool case_insensitive = false;
    for (int i = 1; i < argc; i++) {
        std::string arg = argv[i];
        if (arg == "-i") {
            // Input filename
            if (i + 1 < argc) {
                input_filename = argv[++i];
            }
            else {
                std::cerr << "Error: missing input filename" << std::endl;
                return 1;
            }
        }
        else if (arg == "-o") {
            // Output filename
            if (i + 1 < argc) {
                output_filename = argv[++i];
            }
            else {
                std::cerr << "Error: missing output filename" << std::endl;
                return 1;
            }
        }
        else if (arg == "-c") {
            // Ignore case flag
            case_insensitive = true;
        }
        else {
            std::cerr << "Error: unrecognized command line argument: " << arg << std::endl;
            return 1;
        }
    }

    // Read the words from the dictionary file
    std::vector<std::string> dictionary = load_dictionary_from_file("dictionary.txt");

    // Open the input and output files
    std::ifstream input_file(input_filename);
    std::ofstream output_file(output_filename);
    if (!input_file.is_open()) {
        std::cerr << "Error: failed to open input file: " << input_filename << std::endl;
        return 1;
    }
    if (!output_file.is_open()) {
        std::cerr << "Error: failed to open output file: " << output_filename << std::endl;
        return 1;
    }

    // Spell check the input file and write the misspelled words and their line numbers to the output file
    int line_number = 1;
    std::string word;
    while (input_file >> word) {
        if (!is_word_spelled_correctly(word, dictionary, case_insensitive)) {
            output_file << line_number << ": " << word << std::endl;
        }

        // Check if the word ends with a period, and if so, increment the line number
        if (!word.empty() && word[word.length() - 1] == '.') {
            line_number++;
        }
    }

    return 0;
}